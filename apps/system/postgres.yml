apiVersion: v1
kind: Service
metadata:
  name: postgres-hl
  namespace: system
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: system
spec:
  serviceName: postgres-hl
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15.2
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: data
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: longhorn
      resources:
        requests:
          storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
  namespace: system
spec:
  selector:
    matchLabels:
      app: pgadmin
  replicas: 1
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
      - name: pgadmin
        image: dpage/pgadmin4:latest
        imagePullPolicy: Always
        env:
        - name: PGADMIN_CONFIG_AUTHENTICATION_SOURCES
          value: "['oauth2']"
        - name: PGADMIN_CONFIG_OAUTH2_AUTO_CREATE_USER
          value: "True"
        - name: PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED
          value: "False"
        - name: PGADMIN_CONFIG_OAUTH2_CONFIG
          valueFrom:
            secretKeyRef:
              name: pgadmin-oidc
              key: oidc
        envFrom:
        - secretRef:
            name: pgadmin
        volumeMounts:
        - mountPath: /pgadmin4/servers.json
          name: servers
          subPath: servers.json
      volumes:
      - name: servers
        configMap:
          name: servers
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  namespace: system
spec:
  selector:
    app: pgadmin
  ports:
    - port: 80
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: pgadmin
  namespace: system
spec:
  hostnames:
  - pgadmin.bgalhardo.local
  parentRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: local
    namespace: system
  rules:
  - backendRefs:
    - group: ""
      kind: Service
      name: pgadmin
      port: 80
    matches:
    - path:
        type: PathPrefix
        value: /
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: servers
  namespace: system
data:
  servers.json: |
    {
        "Servers": {
            "1": {
                "Name": "homelab",
                "Group": "Servers",
                "Host": "postgres-hl",
                "Port": 5432,
                "MaintenanceDB": "postgres",
                "Username": "postgres",
                "SSLMode": "prefer",
                "Shared": true,
                "SharedUsername": "postgres"
            }
        }
    }
---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultStaticSecret
metadata:
  name: vault-secret-postgres
  namespace: system
spec:
  type: kv-v2
  mount: kv
  path: hal9000/postgres
  destination:
    name: postgres
    create: true
  refreshAfter: 30s
---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultStaticSecret
metadata:
  name: vault-secret-pgadmin
  namespace: system
spec:
  type: kv-v2
  mount: kv
  path: hal9000/pgadmin
  destination:
    name: pgadmin
    create: true
  refreshAfter: 30s
---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultStaticSecret
metadata:
  name: vault-secret-pgadmin-oidc
  namespace: system
spec:
  type: kv-v2
  mount: kv
  path: hal9000/pgadmin-oidc
  destination:
    name: pgadmin-oidc
    create: true
  refreshAfter: 30s

